#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <random>
#include <cmath>
#include <iomanip>
#include <iterator>


std::vector<double> binomial(unsigned int n, unsigned int s, unsigned int k, double p){
    /*
     input: int n, s, k, double p (probability)
     return: a vector of n doubles from binomial distr with parameters k, p.
     The elements are generated by Mersenne-Twister algorithm initialized with a seed s.
     */
    std::random_device rd;
    std::mt19937_64 gen(rd());
    gen.seed(s);
    std::negative_binomial_distribution<int> distribution(k,p);
    std::vector<double> v;
    for (unsigned int i=0; i < n; ++i) {
        int number = distribution(gen);
        v.push_back(static_cast<double>(number));
    }
    return v;
}

double find_mean(std::vector <double> v){
    /*
     input: vector of doubles
     returns: mean value
    */
    double mean = 0;
    mean = accumulate(v.begin(), v.end(),0.0)/ v.size();
    return mean;
}

double sdev(std::vector <double> v, double mean){
    /*
     input: vector of doubles, mean value
     returns: standart deviation
    */
    double var = 0;
    for(unsigned int i = 0; i < v.size(); i++) {
        var += std::pow(v[i] - mean, 2);
    }
    return sqrt(var/(v.size()-1));
}

void print_up_to_10(std::vector<double> const &v, std::string name){
    /*
 input: vector of doubles, its name
 prints: up to 10 first elements of a vector in comma separated way
    */
    if (v.size()<=10) {
        std::cout << name << " Top " << v.size() << " elements: ";
        std::copy(v.begin(),
                  (v.end() - 1),
                  std::ostream_iterator<double>(std::cout, ", "));
    }
    else {
        std::cout << name << " Top 10 elements: ";
        std::copy(v.begin(),
                  (v.begin() + 10),
                  std::ostream_iterator<double>(std::cout, ", "));
    }
    std::cout<<v.back()<<"\n";
}

std::vector<double> sort (std::vector<double> v){
    /*
 input: vector of doubles
 returns: sorted vector in descending order (initial vector is not changed)
    */
    std::sort(v.begin(), v.end(), [](double el1, double el2) -> bool { return (el1>el2); });
    return v;
}

std::vector<double> metrics(std::vector<double> v, std::string name){

    /*
     input: vector of doubles, name of the vector
     prints: mean, SD, up to 10 biggest values of transformed log2 (|x|+1) vector
     returns: transformed log2 (|x|+1) vector (not sorted!)
     */

    double mean = find_mean(v);
    std::cout<< name <<" Mean: "<< std::setprecision(3) << mean << "\n";
    std::cout<< name <<" Sample standard deviation: "<< std::setprecision(3) << sdev(v, mean) << "\n";

    std::transform(v.begin(), v.end(), v.begin(),
                   [](double el) -> double { return log2(std::abs(el)+1); });

    std::vector<double> v_sorted = sort(v);

    print_up_to_10(v_sorted, name);

    return v;
}

double t_test(std::vector<double> v1, std::vector<double> v2){
    /*
 input: 2 vectors of doubles
 returns: t-value
    */
    double mean1 = find_mean(v1);
    double mean2 = find_mean(v2);
    double sd1 = sdev(v1, mean1);
    double sd2 = sdev(v2, mean2);
    double n = static_cast<double>(v1.size());
    double m = static_cast<double>(v2.size());
    double denom = sqrt(1.0/n + 1.0/m);
    double sp = sqrt(((std::pow(sd1,2)*(n-1) + (std::pow(sd2,2)*(m-1)))/(n+m-2)));

    double ttest = (mean1 - mean2) / (sp * denom);
    return ttest;
}

bool weird_comparison(double el1, double el2){

    /*
 input: 2 elements
 returns: if the first one on the left from the right one in a vector sorted as following:
     first numbers for which the nearest integer value is even,
     sorted in descending order, followed by numbers with
     nearest integer being odd in ascending order.
    */

    int el1_int = round(el1);
    int el2_int = round(el2);
    //if one element is odd, and other is not
    if (el1_int%2 != el2_int%2) return el1_int%2 < el2_int%2;
        //if even
    else if (el1_int%2==0) return el1>el2;
        //if odd
    else return el1<el2;
}

int main(int argc, const char *argv[])
{
    //Check the number of arguments
    if (argc!=6){
        std::cerr<<"You should enter 5 arguments";
        return 1;
    }

    //Check if the needed arg are unsigned integer or double
    unsigned int n{}, m{}, s{}, k{};
    double p{};
    std::stringstream n_str{argv[1]}, m_str{argv[2]},
            s_str{argv[3]}, p_str{argv[4]}, k_str{argv[5]};

    if (!(n_str >> n)){
        std::cerr<<"n is not an integer\n";
        return 1;
    }
    if (!(m_str >> m)) {
        std::cerr<<"m is not an integer\n";
        return 1;
    }
    if (!(s_str >> s)) {
        std::cerr<<"s is not an integer\n";
        return 1;
    }
    if (!(p_str >> p)) {
        std::cerr<<"p is not a double\n";
        return 1;
    };
    if (!(k_str >> k)) {
        std::cerr<<"k is not an integer\n";
        return 1;
    }

    //check if p is probability
    if(p>1||p<=0) {
        std::cerr<<"Invalid p! Should be: 0<p<=1 as probability!\n";
        return 1;
    };

    //generate the v1
    std::vector<double> v1;
    std::vector<double> v1_transformed;
    v1 = binomial(n, s, k, p);

    //scale v1 and write to another variable, print metrics
    v1_transformed = metrics(v1, "V1");

    //generate the v2
    std::vector<double> v2;
    std::vector<double> v2_transformed;
    v2 = binomial(m, s*2, k, p);

    //scale v2 and write to another variable, print metrics
    v2_transformed = metrics(v2, "V2");

    //compare the vectors, print results
    std::cout<< "\nComparing V1 and V2...\n";
    std::cout<< "Unscaled t-statistic: " << t_test(v1, v2)<<"\n";
    std::cout<< "Comparing log2 scaled V1 and V2...\n";
    std::cout<< "Scaled t-statistic: " << t_test(v1_transformed, v2_transformed)<<"\n";
    std::cout<< "Total degrees of freedom: "<< v1.size()+v2.size()-2<<"\n\n";

    //range of sequentially increasing integers from 1 to n
    std::vector<int> v_int(n);
    std::iota(v_int.begin(), v_int.end(), 1);

    //Shuffle them using random numbers generated by Mersenne-Twister algo
    std::random_device rd;
    std::mt19937_64 gen(rd());
    gen.seed(s*7);
    std::shuffle(v_int.begin(), v_int.end(), gen);

    //v1_transformed now is multiplied with obtained elements
    for (unsigned int i=0; i<n; i++) v1_transformed[i] *= static_cast<double>(v_int[i]);

    //sort it in a wierd way from the task
    std::sort(v1_transformed.begin(), v1_transformed.end(), weird_comparison);

    //print in comma separated way
    std::cout<<"Sorted vector: ";
    std::copy(v1_transformed.begin(),
              (v1_transformed.end() - 1),
              std::ostream_iterator<double>(std::cout, ", "));
    std::cout<<v1_transformed.back();

    return 0;
}
